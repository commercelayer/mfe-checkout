import { useExpiry } from "components/hooks/useExpiry"
import type React from "react"
import { useEffect } from "react"
import { useTranslation } from "react-i18next"

export const ExpireTimer: React.FC<{
  expireAt: string | null
  isFinished?: () => void
}> = ({ expireAt, isFinished }) => {
  const { t } = useTranslation()
  const { duration, isExpired, hasTimer } = useExpiry(expireAt)

  useEffect(() => {
    if (hasTimer && isExpired && isFinished) {
      isFinished()
    }
  }, [hasTimer, isExpired, isFinished])

  if (!hasTimer) {
    return null // No timer set, nothing to display
  }
  if (duration == null) {
    return null // No timer set, nothing to display
  }

  // Format remaining time as hh:mm:ss
  const hours = Math.floor(duration / 60000 / 60)
  const minutes = Math.floor(duration / 60000) % 60
  const seconds = Math.floor((duration % 60000) / 1000)
  return (
    <div className="border border-dashed border-primary-light rounded-lg p-4 mb-8 bg-white max-w">
      <div className="flex items-center justify-between text-xs gap-1 border-b border-dashed pb-2">
        <div className="flex items-center gap-2 font-semibold">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 16 16"
            fill="none"
            className="text-primary"
          >
            <title>Timer Icon</title>
            <path
              d="M14.5008 8.54295C14.3946 9.77793 13.9379 10.9569 13.1844 11.9411C12.4308 12.9253 11.4119 13.6739 10.2474 14.0987C9.08295 14.5235 7.82137 14.6069 6.61111 14.339C5.40085 14.0712 4.29226 13.4632 3.41577 12.5868C2.53928 11.7103 1.93135 10.6017 1.66351 9.39142C1.39566 8.18116 1.47905 6.91957 1.90385 5.75509C2.32865 4.59061 3.07719 3.57168 4.06141 2.81817C5.04564 2.06466 6.22459 1.60793 7.45958 1.5017C7.52524 1.49628 7.59132 1.50385 7.65406 1.52397C7.71679 1.5441 7.77495 1.57638 7.82521 1.61898C7.87547 1.66158 7.91685 1.71366 7.94698 1.77225C7.97711 1.83084 7.99541 1.89479 8.00083 1.96045C8.00624 2.02611 7.99867 2.09219 7.97855 2.15493C7.95843 2.21767 7.92615 2.27582 7.88355 2.32608C7.84095 2.37634 7.78887 2.41772 7.73028 2.44785C7.67169 2.47798 7.60774 2.49628 7.54208 2.5017C6.49682 2.59151 5.49895 2.97799 4.66589 3.61568C3.83283 4.25336 3.19924 5.11572 2.83965 6.10128C2.48007 7.08684 2.40946 8.1546 2.63613 9.17893C2.8628 10.2033 3.37732 11.1415 4.11915 11.8834C4.86098 12.6252 5.79926 13.1397 6.82359 13.3664C7.84792 13.5931 8.91569 13.5225 9.90125 13.1629C10.8868 12.8033 11.7492 12.1697 12.3868 11.3366C13.0245 10.5036 13.411 9.50571 13.5008 8.46045C13.5118 8.32784 13.5749 8.20501 13.6764 8.11898C13.7779 8.03294 13.9095 7.99076 14.0421 8.0017C14.1747 8.01264 14.2975 8.07581 14.3835 8.17731C14.4696 8.27882 14.5118 8.41034 14.5008 8.54295ZM7.50083 4.5017V8.0017C7.50083 8.13431 7.5535 8.26148 7.64727 8.35525C7.74104 8.44902 7.86822 8.5017 8.00083 8.5017H11.5008C11.6334 8.5017 11.7606 8.44902 11.8544 8.35525C11.9481 8.26148 12.0008 8.13431 12.0008 8.0017C12.0008 7.86909 11.9481 7.74191 11.8544 7.64815C11.7606 7.55438 11.6334 7.5017 11.5008 7.5017H8.50083V4.5017C8.50083 4.36909 8.44815 4.24191 8.35438 4.14815C8.26061 4.05438 8.13343 4.0017 8.00083 4.0017C7.86822 4.0017 7.74104 4.05438 7.64727 4.14815C7.5535 4.24191 7.50083 4.36909 7.50083 4.5017ZM10.0008 3.0017C10.1492 3.0017 10.2942 2.95771 10.4175 2.8753C10.5408 2.79289 10.637 2.67576 10.6937 2.53871C10.7505 2.40167 10.7654 2.25087 10.7364 2.10538C10.7075 1.9599 10.636 1.82626 10.5312 1.72137C10.4263 1.61648 10.2926 1.54505 10.1471 1.51611C10.0017 1.48717 9.85086 1.50202 9.71381 1.55879C9.57677 1.61555 9.45964 1.71168 9.37722 1.83502C9.29481 1.95836 9.25083 2.10336 9.25083 2.2517C9.25083 2.45061 9.32984 2.64138 9.4705 2.78203C9.61115 2.92268 9.80191 3.0017 10.0008 3.0017ZM12.2508 4.5017C12.3992 4.5017 12.5442 4.45771 12.6675 4.3753C12.7908 4.29289 12.887 4.17576 12.9437 4.03871C13.0005 3.90167 13.0154 3.75087 12.9864 3.60538C12.9575 3.4599 12.886 3.32626 12.7812 3.22137C12.6763 3.11648 12.5426 3.04505 12.3971 3.01611C12.2517 2.98717 12.1009 3.00202 11.9638 3.05879C11.8268 3.11555 11.7096 3.21168 11.6272 3.33502C11.5448 3.45836 11.5008 3.60336 11.5008 3.7517C11.5008 3.95061 11.5798 4.14138 11.7205 4.28203C11.8611 4.42268 12.0519 4.5017 12.2508 4.5017ZM13.7508 6.7517C13.8992 6.7517 14.0442 6.70771 14.1675 6.6253C14.2908 6.54289 14.387 6.42576 14.4437 6.28871C14.5005 6.15167 14.5154 6.00087 14.4864 5.85538C14.4575 5.70989 14.386 5.57626 14.2812 5.47137C14.1763 5.36648 14.0426 5.29505 13.8971 5.26611C13.7517 5.23717 13.6009 5.25202 13.4638 5.30879C13.3268 5.36555 13.2096 5.46168 13.1272 5.58502C13.0448 5.70836 13.0008 5.85336 13.0008 6.0017C13.0008 6.20061 13.0798 6.39138 13.2205 6.53203C13.3611 6.67268 13.5519 6.7517 13.7508 6.7517Z"
              fill="currentColor"
            />
          </svg>
          {t("orderRecap.timer.title")}
        </div>
        <div className="flex gap-1 text-gray-900 items-center text-md font-bold">
          <div className="flex items-center justify-center px-2 py-1 bg-gray-100 rounded w-9">
            {hours.toString().padStart(2, "0")}
          </div>
          <span>:</span>
          <div className="flex items-center justify-center px-2 py-1 bg-gray-100 rounded w-9">
            {minutes.toString().padStart(2, "0")}
          </div>
          <span>:</span>
          <div className="flex items-center justify-center px-2 py-1 bg-gray-100 rounded w-9">
            {seconds.toString().padStart(2, "0")}
          </div>
        </div>
      </div>

      <p className="text-gray-500 text-xs mt-4">
        {t("orderRecap.timer.summary_message")}
      </p>
    </div>
  )
}
